// Mocks generated by Mockito 5.4.4 from annotations
// in learn_dart_together/test/24_03_27/repositories/mask_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:learn_dart_together/24_03_25/http_proxy.dart' as _i2;
import 'package:learn_dart_together/24_03_27/apis/mask_api_impl.dart' as _i4;
import 'package:learn_dart_together/24_03_27/model/mask.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpProxy_0 extends _i1.SmartFake implements _i2.HttpProxy {
  _FakeHttpProxy_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMask_1 extends _i1.SmartFake implements _i3.Mask {
  _FakeMask_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MaskApiImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMaskApiImpl extends _i1.Mock implements _i4.MaskApiImpl {
  MockMaskApiImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpProxy get http => (super.noSuchMethod(
        Invocation.getter(#http),
        returnValue: _FakeHttpProxy_0(
          this,
          Invocation.getter(#http),
        ),
      ) as _i2.HttpProxy);

  @override
  _i5.Future<_i3.Mask> getMask() => (super.noSuchMethod(
        Invocation.method(
          #getMask,
          [],
        ),
        returnValue: _i5.Future<_i3.Mask>.value(_FakeMask_1(
          this,
          Invocation.method(
            #getMask,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Mask>);
}
